<?php

namespace Tests\Feature;


use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class UmlautPrintingTest extends TestCase
{
    // REMOVED RefreshDatabase - this test works with existing production data
    // use RefreshDatabase, WithFaker; // DANGEROUS - would delete all database data!
    // use WithFaker;

    /**
     * Setup method with production safety checks
     * This test is SAFE for production - it only READS data, never modifies it
     */
    protected function setUp(): void
    {
        parent::setUp();

        // This test is SAFE for production because:
        // 1. RefreshDatabase trait has been REMOVED
        // 2. Only SELECT queries are used (no INSERT/UPDATE/DELETE)
        // 3. Only creates temporary files in storage/app/public/
        // 4. No database schema changes

        echo "\nüõ°Ô∏è PRODUCTION SAFETY CONFIRMED:\n";
        echo "- No RefreshDatabase trait\n";
        echo "- Read-only database operations\n";
        echo "- Safe for production environment\n";
    }

    /**
     * –¢–µ—Å—Ç –ø–µ—á–∞—Ç–∏ —Ñ–∞–π–ª–æ–≤ —Å —É–º–ª—è—É—Ç–∞–º–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    public function testUmlautFilePrinting()
    {
        echo "\n========== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏ —Ñ–∞–π–ª–∞ —Å —É–º–ª—è—É—Ç–∞–º–∏ ==========\n";

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
        $orders = DB::table('Orders as o')
            ->join('RodzajTransportu as rt', 'o.IDTransport', '=', 'rt.IDRodzajuTransportu')
            ->whereIn('o.IDOrder', [
                96939,
                // 97007,
                // 96751
            ])
            //->where('o.IDOrderStatus', 42) // Kompletowanie
            ->select(
                'o.IDOrder',
                'o.IDWarehouse',
                DB::raw('CAST(o._OrdersTempDecimal2 AS INT) as Nr_Baselinker'),
                DB::raw("
                    CASE
                        WHEN rt.IDgroup IS NULL THEN rt.IDRodzajuTransportu
                        ELSE rt.IDgroup
                    END as IDTransport
                "),
                DB::raw("
                    CASE
                        WHEN rt.IDgroup IS NULL THEN rt.Nazwa
                        ELSE (
                            SELECT Nazwa FROM RodzajTransportu WHERE IDRodzajuTransportu = rt.IDgroup
                        )
                    END as transport_name
                "),
                'o.Number as OrderNumber',
                'o._OrdersTempString1 as invoice_number'
            )
            ->orderBy('transport_name')
            ->get();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã
        $this->assertNotEmpty($orders, "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

        echo "–ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: " . $orders->count() . "\n";

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        foreach ($orders as $order) {
            echo "\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ ID: {$order->IDOrder} ---\n";

            echo "\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ ID: {$order->IDOrder} ---\n";

            echo "1. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {$order->OrderNumber}\n";
            echo "2. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å—á–µ—Ç–∞: {$order->invoice_number}\n";
            echo "3. –ö–æ–¥–∏—Ä–æ–≤–∫–∞: " . mb_detect_encoding($order->invoice_number) . "\n";
            echo "4. –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: " . strlen($order->invoice_number) . " –±–∞–π—Ç\n";
            echo "5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: " . mb_strlen($order->invoice_number) . " —Å–∏–º–≤–æ–ª–æ–≤\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–µ—á–∞—Ç–∏
            $OrdersTempString7 = DB::table('Orders')->where('IDOrder', $order->IDOrder)->value('_OrdersTempString7');
            $notprint = in_array($OrdersTempString7, ['personal_Product replacement', 'personal_Blogger', 'personal_Reklamacja, ponowna wysy≈Çka']);

            echo "6. –£—Å–ª–æ–≤–∏–µ _OrdersTempString7: " . ($OrdersTempString7 ?? 'NULL') . "\n";

            if ($notprint) {
                Log::info("Order {$order->IDOrder} not printed due to condition {$OrdersTempString7}");
                echo "7. ‚ùå –ó–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –∏–∑-–∑–∞ —É—Å–ª–æ–≤–∏—è: {$OrdersTempString7}\n";
                continue;
            }

            echo "7. ‚úÖ –ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –ø–µ—á–∞—Ç–∞—Ç—å\n";

            // –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –º–∞–≥–∞–∑–∏–Ω–∞
            $IDMagazynu = $order->IDWarehouse;
            $symbol = DB::table('Magazyn')->where('IDMagazynu', $IDMagazynu)->value('Symbol');

            echo "8. ID –º–∞–≥–∞–∑–∏–Ω–∞: {$IDMagazynu}\n";
            echo "9. –°–∏–º–≤–æ–ª –º–∞–≥–∞–∑–∏–Ω–∞: " . ($symbol ?? 'NULL') . "\n";

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
            $fileName = str_replace(['/', '\\'], '_', $order->invoice_number);
            echo "10. –ü–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã —Å–ª–µ—à–µ–π: {$fileName}\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–ª—è—É—Ç–æ–≤
            $fileNameTransliterated = $this->transliterateUmlauts($fileName);
            echo "11. –ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏: {$fileNameTransliterated}\n";

            $fileNameEncoded = urlencode($fileName);
            echo "12. URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {$fileNameEncoded}\n";

            $fileNameSafe = preg_replace('/[^\x20-\x7E]/', '_', $fileName);
            echo "13. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è (ASCII): {$fileNameSafe}\n";

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            $fullFileName = "pdf/{$symbol}/{$fileName}.pdf";
            $path = storage_path('app/public/' . $fullFileName);

            echo "14. –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {$path}\n";
            echo "15. –î–ª–∏–Ω–∞ –ø—É—Ç–∏: " . strlen($path) . " —Å–∏–º–≤–æ–ª–æ–≤\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            $directory = dirname($path);
            if (!file_exists($directory)) {
                mkdir($directory, 0755, true);
                echo "16. ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {$directory}\n";
            } else {
                echo "16. ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {$directory}\n";
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (file_exists($path)) {
                echo "17. ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {$path}\n";
                echo "18. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " . filesize($path) . " –±–∞–π—Ç\n";

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
                if (is_readable($path)) {
                    echo "19. ‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è\n";
                } else {
                    echo "19. ‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è\n";
                }
            } else {
                echo "17. ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {$path}\n";

                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                $testPdfContent = "%PDF-1.4\n1 0 obj\n<< /Type /Catalog /Pages 2 0 R >>\nendobj\n2 0 obj\n<< /Type /Pages /Kids [3 0 R] /Count 1 >>\nendobj\n3 0 obj\n<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] >>\nendobj\nxref\n0 4\n0000000000 65535 f\n0000000009 00000 n\n0000000058 00000 n\n0000000115 00000 n\ntrailer\n<< /Size 4 /Root 1 0 R >>\nstartxref\n174\n%%EOF";
                file_put_contents($path, $testPdfContent);
                echo "18. ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª: " . filesize($path) . " –±–∞–π—Ç\n";
            }

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—á–∞—Ç–∏
            $usersPrinters = ['invoice' => 'HP_LaserJet_Invoice']; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            $printer = $usersPrinters['invoice'];

            echo "19. –ü—Ä–∏–Ω—Ç–µ—Ä: {$printer}\n";

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—á–∞—Ç–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
            $printCommand = "lpr -P " . escapeshellarg($printer) . " " . escapeshellarg($path);
            echo "20. –ö–æ–º–∞–Ω–¥–∞ –ø–µ—á–∞—Ç–∏: {$printCommand}\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            echo "21. –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä: " . escapeshellarg($printer) . "\n";
            echo "22. –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å: " . escapeshellarg($path) . "\n";

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
            echo "23. üñ®Ô∏è –ö–æ–º–∞–Ω–¥–∞ –ø–µ—á–∞—Ç–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
            $windowsPath = str_replace('/', '\\', $path);
            echo "24. –ü—É—Ç—å –¥–ª—è Windows: {$windowsPath}\n";

            $unixPath = str_replace('\\', '/', $path);
            echo "25. –ü—É—Ç—å –¥–ª—è Unix: {$unixPath}\n";

            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
            if (file_exists($path) && strpos($path, 'test') !== false) {
                unlink($path);
                echo "26. üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω\n";
            }

            echo "--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ {$order->IDOrder} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---\n";
        }

        echo "\n========== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ==========\n\n";

        // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –±–µ–∑ –æ—à–∏–±–æ–∫
        $this->assertTrue(true, "–¢–µ—Å—Ç –ø–µ—á–∞—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
    }

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
     */
    public function testSpecificOrder()
    {
        echo "\n========== –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ 96939 ==========\n";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        $orderExists = DB::table('Orders')->where('IDOrder', 96939)->exists();

        if (!$orderExists) {
            echo "‚ùå –ó–∞–∫–∞–∑ 96939 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n";
            $this->markTestSkipped('–ó–∞–∫–∞–∑ 96939 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return;
        }

        echo "‚úÖ –ó–∞–∫–∞–∑ 96939 –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n";

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        $orderData = DB::table('Orders')
            ->where('IDOrder', 96939)
            ->select('*')
            ->first();

        echo "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n";
        echo "- IDOrder: {$orderData->IDOrder}\n";
        echo "- Number: {$orderData->Number}\n";
        echo "- IDOrderStatus: {$orderData->IDOrderStatus}\n";
        echo "- IDWarehouse: {$orderData->IDWarehouse}\n";
        echo "- IDTransport: {$orderData->IDTransport}\n";
        echo "- _OrdersTempString1: " . ($orderData->_OrdersTempString1 ?? 'NULL') . "\n";
        echo "- _OrdersTempString7: " . ($orderData->_OrdersTempString7 ?? 'NULL') . "\n";
        echo "- _OrdersTempDecimal2: " . ($orderData->_OrdersTempDecimal2 ?? 'NULL') . "\n";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        if ($orderData->IDOrderStatus != 42) {
            echo "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ 42 (Kompletowanie), —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {$orderData->IDOrderStatus}\n";
        } else {
            echo "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (42 - Kompletowanie)\n";
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        $transportExists = DB::table('RodzajTransportu')
            ->where('IDRodzajuTransportu', $orderData->IDTransport)
            ->exists();

        if (!$transportExists) {
            echo "‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å ID {$orderData->IDTransport} –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
        } else {
            echo "‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω\n";
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        $warehouseExists = DB::table('Magazyn')
            ->where('IDMagazynu', $orderData->IDWarehouse)
            ->exists();

        if (!$warehouseExists) {
            echo "‚ùå –ú–∞–≥–∞–∑–∏–Ω —Å ID {$orderData->IDWarehouse} –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
        } else {
            echo "‚úÖ –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–π–¥–µ–Ω\n";
        }

        $this->assertTrue(true, "–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω");
    }

    /**
     * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–º–µ—Ü–∫–∏–µ —É–º–ª—è—É—Ç—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
     */
    private function transliterateUmlauts($string)
    {
        $umlauts = [
            '√§' => 'ae',
            '√∂' => 'oe',
            '√º' => 'ue',
            '√ü' => 'ss',
            '√Ñ' => 'Ae',
            '√ñ' => 'Oe',
            '√ú' => 'Ue'
        ];

        return strtr($string, $umlauts);
    }

    /**
     * –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–ª—è—É—Ç–æ–≤
     */
    public function testUmlautHandlingMethods()
    {
        $testString = "M√ºller_Gr√∂√üe_Z√ºrich_Stra√üe_K√∂ln_Br√∂tchen_D√§√º√∂√ü";

        echo "\n========== –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–ª—è—É—Ç–æ–≤ ==========\n";
        echo "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {$testString}\n";

        // –ú–µ—Ç–æ–¥ 1: –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
        $method1 = $this->transliterateUmlauts($testString);
        echo "–ú–µ—Ç–æ–¥ 1 (—Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è): {$method1}\n";

        // –ú–µ—Ç–æ–¥ 2: URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        $method2 = urlencode($testString);
        echo "–ú–µ—Ç–æ–¥ 2 (URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ): {$method2}\n";

        // –ú–µ—Ç–æ–¥ 3: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–æ–≤
        $method3 = preg_replace('/[^\x20-\x7E]/', '_', $testString);
        echo "–ú–µ—Ç–æ–¥ 3 (–∑–∞–º–µ–Ω–∞ –Ω–µ-ASCII): {$method3}\n";

        // –ú–µ—Ç–æ–¥ 4: iconv —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
        $method4 = iconv('UTF-8', 'ASCII//TRANSLIT', $testString);
        echo "–ú–µ—Ç–æ–¥ 4 (iconv): {$method4}\n";

        // –ú–µ—Ç–æ–¥ 5: mb_convert_encoding
        $method5 = mb_convert_encoding($testString, 'ASCII', 'UTF-8');
        echo "–ú–µ—Ç–æ–¥ 5 (mb_convert_encoding): {$method5}\n";

        echo "========== –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω ==========\n\n";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        $this->assertNotEmpty($method1);
        $this->assertNotEmpty($method2);
        $this->assertNotEmpty($method3);
        $this->assertNotEmpty($method4);
        $this->assertNotEmpty($method5);
    }

    /**
     * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —É–º–ª—è—É—Ç–∞–º–∏ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
     */
    public function testFileSystemUmlautSupport()
    {
        echo "\n========== –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ==========\n";

        $testFiles = [
            'test_m√ºller.txt',
            'test_gr√∂√üe.txt',
            'test_z√ºrich.txt',
            'test_√ütra√üe.txt'
        ];

        $testDir = storage_path('app/public/umlaut_test');

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if (!file_exists($testDir)) {
            mkdir($testDir, 0755, true);
        }

        foreach ($testFiles as $filename) {
            $filepath = $testDir . '/' . $filename;

            echo "–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª: {$filename}\n";

            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            file_put_contents($filepath, "Test content for {$filename}");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
            if (file_exists($filepath)) {
                echo "‚úì –§–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {$filepath}\n";

                // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                $content = file_get_contents($filepath);
                echo "‚úì –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: " . strlen($content) . " bytes\n";

                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                unlink($filepath);
                echo "‚úì –§–∞–π–ª —É–¥–∞–ª–µ–Ω\n";
            } else {
                echo "‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {$filepath}\n";
                $this->fail("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —É–º–ª—è—É—Ç–∞–º–∏: {$filename}");
            }

            echo "---\n";
        }

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if (file_exists($testDir)) {
            rmdir($testDir);
        }

        echo "========== –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω ==========\n\n";

        $this->assertTrue(true, "–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ");
    }
}
